// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = []
}

datasource db {
    provider          = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Sex {
    Male
    Female
}

enum Role {
    Admin
    User
    Institution
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    sex   Sex?
    birth DateTime?
    phone String?
    role  Role      @default(User)

    Plan          Plan?        @relation(fields: [planId], references: [id])
    planId        String?
    Order         Order[]
    TestResult    TestResult[]
    Institution   Institution? @relation(fields: [institutionId], references: [id])
    institutionId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Institution {
    id          String   @id @default(cuid())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Users       User[]
}

model Plan {
    id          String        @id @default(cuid())
    name        String
    description String
    Benefits    PlanBenefit[]
    price       Int           @default(0)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Users       User[]
    Order       Order[]
}

model PlanBenefit {
    id          String   @id @default(cuid())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Plan        Plan?    @relation(fields: [planId], references: [id])
    planId      String?
}

model Order {
    id              String   @id @default(cuid())
    User            User     @relation(fields: [userId], references: [id])
    Plan            Plan     @relation(fields: [planId], references: [id])
    service_fee     Int
    transaction_fee Int
    payment_fee     Int
    tax             Int
    invoice         String?  @default("")
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    userId          String
    planId          String
}

model Media {
    id         String       @id @default(cuid())
    name       String
    url        String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    TestResult TestResult[]
}

model TestResult {
    id        String       @id @default(cuid())
    Reviews   TestReview[]
    score     Int
    Video     Media        @relation(fields: [mediaId], references: [id])
    User      User         @relation(fields: [userId], references: [id])
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    mediaId   String
    userId    String
}

model TestReview {
    id           String      @id @default(cuid())
    timestamp    Int
    review       String      @db.Text()
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    TestResult   TestResult? @relation(fields: [testResultId], references: [id])
    testResultId String?
}
